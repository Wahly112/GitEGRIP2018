#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar 10 09:23:09 2020

This code tries to find the right use for computing the cospectrum of two time series as needed for the ogive analysis. 

signal.csd should compute cross spectrum and taking the real party of the outcome should be the cospectrum 

at least thats what I do so far in my code


The timesries here are taken from the Stull book as an example 



@author: swa048
"""
import numpy as np
import scipy.signal as signal
import pandas as pd 




w=np.array([0,-2,-1,1,-2,2,1,1])
W=pd.Series(w)
wprime=w-w.mean()
wprime2=wprime**2
q=np.array([8,9,9,6,10,3,5,6])
Q=pd.Series(q).astype(float)
qprime=q-q.mean()
qprime2=qprime**2
wqprime=qprime*wprime


cov=np.cov(w,q,bias=True)[0,1] # can be biased (normalized with N)
#cov=W.cov(Q) # can not be biased (normalized with N-1)


# the question is, if I can actually use the np.real(signal.csd ) to get the cospectrum (with which I was actually computing all my ogive analysis so far)
f,crossspec=signal.csd(w, q, fs=1, window=('tukey',0.5),nperseg=len(w), noverlap=, nfft=None, detrend=False, return_onesided=True, scaling='density', axis=-1) #('tukey',0.5) nperseg=len(w)
cross_corr=signal.correlate(w,q,method='fft',mode='same')
co=np.round(np.real(crossspec),3)
co.sum()

N=8
Fw=np.fft.fft(w)/N
Fw2=np.abs(np.round(Fw[1:],3))**2
Gw=np.round(Fw2,3)

Fwreal=np.real(np.round(Fw,3))
Fwimag=np.imag(np.round(Fw,3))

Fq=np.fft.fft(q)/N
Fq2=np.abs(np.round(Fq[1:],3))**2
Gq=np.round(Fq2,3)

Fqreal=np.real(np.round(Fq,3))
Fqimag=np.imag(np.round(Fq,3))

Gwq=Fw*Fq    #np.round(Fw*Fq,3)


Co=np.round(Fwreal*Fqreal+Fwimag*Fqimag,3)
Co.sum()
#%% this is the w'q' timeseries spectra.. this is NOT equal to the cospectrum of w and q timeseries (and it should NOT)
Fwq=np.fft.fft(wqprime)/8
Gwqprime=np.abs(Fwq[1:])**2
